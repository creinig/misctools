#!/usr/bin/env ruby 

require "pp"
require "fileutils"

class Bt1Char
  STRUCTURE = {
    # attr, startidx, pack_pattern
    name: [0x00, "a16"],
    st: [0x17, "s<"],
    iq: [0x19, "s<"],
    dx: [0x1b, "s<"],
    cn: [0x1d, "s<"],
    lk: [0x1f, "s<"],
    st_max: [0x21, "s<"],
    iq_max: [0x23, "s<"],
    dx_max: [0x25, "s<"],
    cn_max: [0x27, "s<"],
    lk_max: [0x29, "s<"],
    hp: [0x2d, "s<"],
    hp_max: [0x2f, "s<"],
    sp: [0x31, "s<"],
    sp_max: [0x33, "s<"],
    exp: [0x45, "l<"]
  }

  def method_missing(name, *args)
    attr = name.to_s.delete_suffix("=").to_sym
    spec = STRUCTURE[attr]
    return super unless spec

    if name.end_with? "="
      binary = args[0].pack(spec[1])
      @data[spec[0], binary.size] = binary
    else
      @data[spec[0], 32].unpack1(spec[1])
    end
  end

  def initialize(filename)
    @data = File.open(filename, "rb") { |f| f.read }
    raise "Not a character" unless is_char
    @filename = filename
  end

  # Display character summary
  def show
    puts "Name:  #{name}"
    puts "Attrs: ST #{st}/#{st_max}, IQ #{iq}/#{iq_max}, DX #{dx}/#{dx_max}, CN #{cn}/#{cn_max}, LK #{lk}/#{lk_max}"
    puts "HP:    #{hp}/#{hp_max}"
    puts "SP:    #{sp}/#{sp_max}"
    puts "Exp:   #{exp}"
  end

  # Heal character (fill HP and SP)
  def heal
    self.hp = hp_max
    self.sp = sp_max
  end


  private

  def is_char
    @data[0x10].unpack1("c") == 0x01
  end
end

def backup(name)
  FileUtils.mkdir_p("backup")
  FileUtils.cp(name, "backup/#{name}-#{Time.now.strftime('%FT%T%:z')}")
end

# Write character back, storing a backup copy in ./backup
def write(data, name)
  backup(name)
  File.open(name, "wb") { |f| f.write(data.pack(FORMAT)) }
end

# Main ---------------------------

name = ARGV[0]

puts "== Before"
char = Bt1Char.new(name)
char.show
#pp data
# puts
# heal data
# puts "== After"
# show data
# write(data, name)
